package com.rwn.rwnstudy.activities;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.os.Build;import android.os.Bundle;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import android.text.TextUtils;import android.util.Patterns;import android.view.View;import android.widget.ArrayAdapter;import android.widget.Button;import android.widget.CheckBox;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.RadioButton;import android.widget.RadioGroup;import android.widget.Spinner;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.common.ConnectionResult;import com.google.android.gms.common.GoogleApiAvailability;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseAuthException;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.rwn.rwnstudy.R;import com.rwn.rwnstudy.utilities.ConstantForApp;import com.rwn.rwnstudy.utilities.UserGetterAndSetter;import java.util.ArrayList;import java.util.Calendar;import java.util.List;import java.util.Objects;import static com.rwn.rwnstudy.R.string.fill_this;public class RegisterActivity extends AppCompatActivity {    private String user, addmisionNo, Gender = "Male";    private EditText editTextName, editTextDep, editTextPass, editTextConPass, editTextAddmisionNo, editTextEmail, editTextDOB;    private TextView textViewLogin;    private RadioButton radioButtonMale, radioButtonFemale;    private RadioGroup radioGroupGender;    private Spinner spinnerCollege, spinnerDepartment;    private Button buttonRegister;    TextView textViewGender;    private FirebaseAuth mAuth;    CheckBox checkBox;    private ProgressBar progressBar;    private LinearLayout linearLayoutGrey;    TextView textViewPrivacyAndPolicies;    DatabaseReference databaseReferenceUserRef, databaseReference;    private String current_user;    Calendar calendar;    int date, month, year;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_register);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            Objects.requireNonNull(getSupportActionBar()).setTitle("Register With New Account");        }        viewIntialization();        userIdentificatioTeacherOrStudent();        spinnerSetValue();        buttonClickAction();    }    private void spinnerSetValue() {        databaseReference = FirebaseDatabase.getInstance().getReference();        /// college is used to node deparment in database because each department are seprately college.        databaseReference.child("College").addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if (dataSnapshot.exists()) {                    final List <String> departmentList = new ArrayList <String>();                    for (DataSnapshot snap : dataSnapshot.getChildren()) {                        departmentList.add(snap.getKey());                    }                    final ArrayAdapter <String> spinnerArrayAdapter = new ArrayAdapter <String>(                            RegisterActivity.this, android.R.layout.simple_list_item_1, departmentList);                    spinnerDepartment.setAdapter(spinnerArrayAdapter);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    protected boolean isOnline() {        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkInfo = cm.getActiveNetworkInfo();        if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {            return true;        } else {            return false;        }    }    private void buttonClickAction() {        radioGroupGender.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener() {            public void onCheckedChanged(RadioGroup group, int checkedId) {                switch (checkedId) {                    case R.id.radioButton_male:                        Gender = "Male";                        break;                    case R.id.radioButton_Female:                        Gender = "Female";                        break;                }            }        });        textViewPrivacyAndPolicies.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                startActivity(new Intent(RegisterActivity.this, PrivacyAndPoliciesActivity.class));            }        });        buttonRegister.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (isOnline()) {                    if (checkBox.isChecked()) {                        checkingField();                    } else {                        Toast.makeText(RegisterActivity.this, "Please Check the privacy and policies box ", Toast.LENGTH_SHORT).show();                    }                } else {                    Toast.makeText(RegisterActivity.this, "No Internet Connection Found", Toast.LENGTH_SHORT).show();                }            }        });        textViewLogin.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Intent intent = new Intent(RegisterActivity.this, LoginActivity.class);                intent.putExtra(ConstantForApp.USER, user);                startActivity(intent);                finish();            }        });    }    private void checkingField() {        String fullname = editTextName.getText().toString().trim();        String emailID = editTextEmail.getText().toString().trim();        String password = editTextPass.getText().toString().trim();        String ConPassword = editTextConPass.getText().toString().trim();        if (TextUtils.isEmpty(fullname)) {            editTextName.requestFocus();            editTextName.setError(getString(fill_this));        } else if (!(Patterns.EMAIL_ADDRESS.matcher(emailID).matches())) {            editTextEmail.setError(getString(R.string.enter_valid_email));            editTextEmail.requestFocus();        } else if (password.isEmpty() || password.length() < 8) {            editTextPass.setError(getString(R.string.field_must_be_8));            editTextPass.requestFocus();        } else if (TextUtils.isEmpty(emailID)) {            editTextEmail.requestFocus();            editTextEmail.setError(getString(fill_this));        } else if (!(ConPassword.equals(password))) {            editTextConPass.requestFocus();            editTextConPass.setError(getString(R.string.password_not_match));        } else {            try {                String collegeNmae = spinnerCollege.getSelectedItem().toString();                if (user.equals(ConstantForApp.TEACHER)) {                    String department = spinnerDepartment.getSelectedItem().toString();                    String DOB = editTextDOB.getText().toString().trim();                    if (TextUtils.isEmpty(department)) {                        editTextDep.requestFocus();                        editTextDep.setError(getString(fill_this));                    } else if (TextUtils.isEmpty(DOB)) {                        editTextDOB.setError(getString(fill_this));                        editTextDOB.requestFocus();                    } else {                        registerToDatabaseForTeacher(fullname, department, collegeNmae, password, emailID, DOB);                    }                } else {                    addmisionNo = editTextAddmisionNo.getText().toString();                    if (TextUtils.isEmpty(addmisionNo)) {                        editTextDep.requestFocus();                        editTextDep.setError(getString(fill_this));                    } else {                        registerToDatabaseForStudent(fullname, collegeNmae, password, emailID);                    }                }            } catch (Exception e) {                setUpProgressBar(View.VISIBLE);                viewEnabledAndDisabled(false);                Toast.makeText(RegisterActivity.this, R.string.something_went_wrong, Toast.LENGTH_SHORT).show();            }        }    }    private void registerToDatabaseForStudent(final String fullname, final String collegeNmae, String password, final String emailID) {        setUpProgressBar(View.VISIBLE);        viewEnabledAndDisabled(false);        if (GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS) {            // OK, you can do your job            mAuth.createUserWithEmailAndPassword(emailID, password)                    .addOnCompleteListener(new OnCompleteListener <AuthResult>() {                        @Override                        public void onComplete(@NonNull Task <AuthResult> task) {                            if (task.isSuccessful()) {                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {                                    current_user = Objects.requireNonNull(mAuth.getCurrentUser()).getUid();                                }                                databaseReferenceUserRef = FirebaseDatabase.getInstance().getReference().child(getString(R.string.datbase_user_node)).child(current_user);                                updateDetaileIntoFirebaseDataBaseforStudents(fullname, collegeNmae, emailID);                            } else {                                String errorCode = ((FirebaseAuthException) task.getException()).getErrorCode();                                switch (errorCode) {                                    case "ERROR_INVALID_CUSTOM_TOKEN":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The custom token format is incorrect. Please check the documentation.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_CUSTOM_TOKEN_MISMATCH":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The custom token corresponds to a different audience.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_INVALID_CREDENTIAL":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The supplied auth credential is malformed or has expired.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_INVALID_EMAIL":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The email address is invalid.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_WRONG_PASSWORD":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The password is invalid.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_USER_MISMATCH":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The supplied credentials do not correspond to the previously signed in user.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_REQUIRES_RECENT_LOGIN":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "This operation is sensitive and requires recent authentication. Log in again before retrying this request.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_ACCOUNT_EXISTS_WITH_DIFFERENT_CREDENTIAL":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_EMAIL_ALREADY_IN_USE":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The email address is already in use by another account.   ", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_CREDENTIAL_ALREADY_IN_USE":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "This credential is already associated with a different user account.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_USER_DISABLED":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The user account has been disabled by an administrator.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_USER_TOKEN_EXPIRED":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The user\\'s credential is no longer valid. The user must sign in again.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_USER_NOT_FOUND":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "There is no user record.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_INVALID_USER_TOKEN":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The user\\'s credential is no longer valid. The user must sign in again.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_OPERATION_NOT_ALLOWED":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "This operation is not allowed. You must enable this service in the console.", Toast.LENGTH_LONG).show();                                        break;                                    case "ERROR_WEAK_PASSWORD":                                        setUpProgressBar(View.GONE);                                        viewEnabledAndDisabled(true);                                        Toast.makeText(RegisterActivity.this, "The given password is invalid.", Toast.LENGTH_LONG).show();                                        break;                                }                            }                        }                    });        } else {            Toast.makeText(this, R.string.please_update_goole_play_service, Toast.LENGTH_SHORT).show();            setUpProgressBar(View.GONE);            viewEnabledAndDisabled(true);        }    }    private void updateDetaileIntoFirebaseDataBaseforStudents(final String fullname, final String collegeNmae, final String emailID) {        UserGetterAndSetter userGetterAndSetter = new UserGetterAndSetter();        userGetterAndSetter.setName(fullname);        userGetterAndSetter.setCollegeName(collegeNmae);        userGetterAndSetter.setEmailID(emailID);        userGetterAndSetter.setUserType(user);        userGetterAndSetter.setAdmissionNumber(addmisionNo);        databaseReferenceUserRef.setValue(userGetterAndSetter).addOnCompleteListener(new OnCompleteListener <Void>() {            @Override            public void onComplete(@NonNull Task <Void> task) {                if (task.isSuccessful()) {                    Intent intent = new Intent(RegisterActivity.this, ProfileImageUploaderActivity.class);                    intent.putExtra(ConstantForApp.USER, ConstantForApp.STUDENT);                    intent.putExtra(ConstantForApp.FULLNAME, fullname);                    intent.putExtra(ConstantForApp.ADDMISION_NUMBER, addmisionNo);                    intent.putExtra(ConstantForApp.COLLEGE_NAME, collegeNmae);                    intent.putExtra(ConstantForApp.EMAIL_ID, emailID);                    startActivity(intent);                    finish();                } else                    Toast.makeText(RegisterActivity.this, R.string.error_occourd, Toast.LENGTH_SHORT).show();            }        });    }    private void registerToDatabaseForTeacher(final String fullname, final String department, final String collegeNmae, final String password, final String emailID, final String Dob) {        setUpProgressBar(View.VISIBLE);        viewEnabledAndDisabled(false);        if (GoogleApiAvailability.getInstance().isGooglePlayServicesAvailable(this) == ConnectionResult.SUCCESS) {            // OK, you can do your job            mAuth.createUserWithEmailAndPassword(emailID, password)                    .addOnCompleteListener(new OnCompleteListener <AuthResult>() {                        @Override                        public void onComplete(@NonNull Task <AuthResult> task) {                            if (task.isSuccessful()) {                                current_user = Objects.requireNonNull(mAuth.getCurrentUser()).getUid();                                databaseReferenceUserRef = FirebaseDatabase.getInstance().getReference().child(getString(R.string.datbase_user_node)).child(current_user);                                updateDetaileIntoFirebaseDataBaseForTeachers(fullname, department, collegeNmae, emailID, Dob);                            } else {                                String exception = String.valueOf(task.getException());                                setUpProgressBar(View.GONE);                                viewEnabledAndDisabled(true);                                Toast.makeText(RegisterActivity.this, getString(R.string.error_occourd) + exception, Toast.LENGTH_SHORT).show();                            }                        }                    });        } else {            setUpProgressBar(View.GONE);            viewEnabledAndDisabled(true);            Toast.makeText(this, R.string.please_update_goole_play_service, Toast.LENGTH_SHORT).show();        }    }    private void updateDetaileIntoFirebaseDataBaseForTeachers(final String fullname, final String department, final String collegeNmae, final String emailID, final String DOB) {        UserGetterAndSetter userGetterAndSetter = new UserGetterAndSetter();        userGetterAndSetter.setDateOfBirth(DOB);        userGetterAndSetter.setDepartment(department);        userGetterAndSetter.setName(fullname);        userGetterAndSetter.setCollegeName(collegeNmae);        userGetterAndSetter.setEmailID(emailID);        userGetterAndSetter.setGender(Gender);        userGetterAndSetter.setUserType(user);        databaseReferenceUserRef.setValue(userGetterAndSetter).addOnCompleteListener(new OnCompleteListener <Void>() {            @Override            public void onComplete(@NonNull Task <Void> task) {                if (task.isSuccessful()) {                    Intent intent = new Intent(RegisterActivity.this, ProfileImageUploaderActivity.class);                    intent.putExtra(ConstantForApp.USER, ConstantForApp.TEACHER);                    intent.putExtra(ConstantForApp.FULLNAME, fullname);                    intent.putExtra(ConstantForApp.DEPARTMENT, department);                    intent.putExtra(ConstantForApp.COLLEGE_NAME, collegeNmae);                    intent.putExtra(ConstantForApp.EMAIL_ID, emailID);                    intent.putExtra(ConstantForApp.DOB, DOB);                    intent.putExtra(ConstantForApp.GENDER, Gender);                    startActivity(intent);                    finish();                } else                    Toast.makeText(RegisterActivity.this, R.string.error_occourd, Toast.LENGTH_SHORT).show();            }        });    }    private void viewIntialization() {        editTextAddmisionNo = findViewById(R.id.editText_admission_no);        editTextName = findViewById(R.id.editText_name);        editTextDep = findViewById(R.id.editText_Department);        editTextConPass = findViewById(R.id.editText_confirm_password);        editTextPass = findViewById(R.id.editText_password);        editTextEmail = findViewById(R.id.editText_email);        textViewLogin = findViewById(R.id.textView_login);        spinnerCollege = findViewById(R.id.spinner_college);        spinnerDepartment = findViewById(R.id.spinner_branch);        buttonRegister = findViewById(R.id.button_register);        radioButtonFemale = findViewById(R.id.radioButton_Female);        radioButtonMale = findViewById(R.id.radioButton_male);        radioGroupGender = findViewById(R.id.radioGroup);        editTextDOB = findViewById(R.id.edit_date_Of_Birth);        mAuth = FirebaseAuth.getInstance();        textViewGender = findViewById(R.id.textview_gender);        checkBox = findViewById(R.id.checkbox_I_agree);        textViewPrivacyAndPolicies = findViewById(R.id.textview_privacyAnd_polices);        linearLayoutGrey = findViewById(R.id.linear_layout_grey);        progressBar= findViewById(R.id.progress_circular);        calendar = Calendar.getInstance();        date = calendar.get(Calendar.DAY_OF_MONTH);        month = calendar.get(Calendar.MONTH);        year = 1998;    }    private void userIdentificatioTeacherOrStudent() {        user = getIntent().getStringExtra(ConstantForApp.USER);        if (user.isEmpty()) return;        else if (user.equals(ConstantForApp.STUDENT)) {            spinnerDepartment.setVisibility(View.GONE);            radioGroupGender.setVisibility(View.GONE);            radioButtonMale.setVisibility(View.GONE);            radioButtonFemale.setVisibility(View.GONE);            editTextDOB.setVisibility(View.GONE);            textViewGender.setVisibility(View.GONE);        } else if (user.equals(ConstantForApp.TEACHER)) {            editTextAddmisionNo.setVisibility(View.GONE);            radioGroupGender.check(R.id.radioButton_male);        }    }    private void viewEnabledAndDisabled(boolean b) {        textViewLogin.setEnabled(b);        textViewPrivacyAndPolicies.setEnabled(b);        editTextAddmisionNo.setEnabled(b);        editTextConPass.setEnabled(b);        editTextDOB.setEnabled(b);        editTextDep.setEnabled(b);        spinnerCollege.setEnabled(b);        spinnerDepartment.setEnabled(b);        radioGroupGender.setEnabled(b);        radioButtonMale.setEnabled(b);        radioButtonFemale.setEnabled(b);        checkBox.setEnabled(b);        editTextName.setEnabled(b);        editTextEmail.setEnabled(b);        editTextPass.setEnabled(b);    }    private void setUpProgressBar(int visible) {        progressBar.setVisibility(visible);        linearLayoutGrey.setVisibility(visible);    }}