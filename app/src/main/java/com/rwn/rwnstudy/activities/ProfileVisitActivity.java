package com.rwn.rwnstudy.activities;import android.app.ProgressDialog;import android.content.Context;import android.content.Intent;import android.net.ConnectivityManager;import android.net.NetworkInfo;import android.net.Uri;import android.os.Build;import android.os.Bundle;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import android.view.MenuItem;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.TextView;import android.widget.Toast;import com.google.android.gms.tasks.Continuation;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.storage.FirebaseStorage;import com.google.firebase.storage.StorageReference;import com.google.firebase.storage.UploadTask;import com.rwn.rwnstudy.R;import com.rwn.rwnstudy.utilities.ConstantForApp;import com.rwn.rwnstudy.utilities.UserGetterAndSetter;import com.squareup.picasso.Picasso;import com.theartofdev.edmodo.cropper.CropImage;import com.theartofdev.edmodo.cropper.CropImageView;import java.util.HashMap;import java.util.Objects;import de.hdodenhof.circleimageview.CircleImageView;//import com.rwn.rwnstudy.utilities.Constant;public class ProfileVisitActivity extends AppCompatActivity {    private EditText editTextName, editTextDep, editTextAddmisionNo, editTextEmail, editTextDOB, editTextCollegeName, editTextGender, editTextCourse, editTextRollnumber;    private CircleImageView circleImageView;    private FirebaseAuth mAuth;    private DatabaseReference databaseReferenceUserRef, databaseReference;    private StorageReference firebaseStorageUserProfileRef;    private String CURRENT_USER;    ProgressDialog progressDialog;    private Uri downloadUri, dataUri;    private Button buttonSubmit;    private TextView editTextEditProfile;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_profile_visit);        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            Objects.requireNonNull(getSupportActionBar()).setTitle("Profile");        }        viewIntialization();        dataBaseConnection();        profileDetailSet();    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        switch (item.getItemId()) {            case android.R.id.home:                onBackPressed();                return true;        }        return super.onOptionsItemSelected(item);    }    private void profileDetailSet() {        databaseReferenceUserRef.child(CURRENT_USER).addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                UserGetterAndSetter userGetterAndSetter = dataSnapshot.getValue(UserGetterAndSetter.class);                if (dataSnapshot.exists()) {                    String profileLink = userGetterAndSetter.getProfileImage();                    Picasso.get().load(profileLink).placeholder(R.drawable.profile).into(circleImageView);                    editTextName.setText(userGetterAndSetter.getName());                    String user = userGetterAndSetter.getUserType();                    if (user.equals(ConstantForApp.TEACHER)) {                        String emailId = userGetterAndSetter.getEmailID();                        editTextCourse.setVisibility(View.GONE);                        editTextAddmisionNo.setVisibility(View.GONE);                        editTextRollnumber.setVisibility(View.GONE);                        editTextDep.setText(userGetterAndSetter.getDepartment());                        editTextGender.setText(userGetterAndSetter.getGender());                        editTextDOB.setText(userGetterAndSetter.getDateOfBirth());                        editTextEmail.setText(userGetterAndSetter.getEmailID());                        editTextCollegeName.setText(userGetterAndSetter.getCollegeName());                    } else {                        editTextDep.setText(userGetterAndSetter.getDepartment());                        editTextGender.setText(userGetterAndSetter.getGender());                        editTextDOB.setText(userGetterAndSetter.getDateOfBirth());                        editTextEmail.setText(userGetterAndSetter.getEmailID());                        editTextRollnumber.setText(userGetterAndSetter.getRollNumber());                        editTextCourse.setText(userGetterAndSetter.getCourse() + " " + userGetterAndSetter.getSection());                        editTextCollegeName.setText(userGetterAndSetter.getCollegeName());                        editTextAddmisionNo.setText(userGetterAndSetter.getAdmissionNumber());                    }                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void dataBaseConnection() {        mAuth = FirebaseAuth.getInstance();        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {            CURRENT_USER = Objects.requireNonNull(mAuth.getCurrentUser()).getUid();        }        databaseReferenceUserRef = FirebaseDatabase.getInstance().getReference().child(getString(R.string.datbase_user_node));        databaseReference = FirebaseDatabase.getInstance().getReference();        firebaseStorageUserProfileRef = FirebaseStorage.getInstance().getReference().child(getString(R.string.storage_image)).child(CURRENT_USER).child(getString(R.string.firebase_storage_profile_picture_node));    }    private void viewIntialization() {        editTextAddmisionNo = findViewById(R.id.editText_admission_no);        editTextName = findViewById(R.id.editText_name);        editTextDep = findViewById(R.id.editText_Department);        progressDialog = new ProgressDialog(this);        editTextEditProfile = findViewById(R.id.edit_text_editProfile);        editTextAddmisionNo = findViewById(R.id.editText_admission_no);        editTextCollegeName = findViewById(R.id.editText_College);        editTextEmail = findViewById(R.id.editText_email);        editTextGender = findViewById(R.id.editText_Gender);        editTextCourse = findViewById(R.id.edit_text_course);        editTextRollnumber = findViewById(R.id.edit_text_roll_number);        circleImageView = findViewById(R.id.circularImage_profilepic);        editTextDOB = findViewById(R.id.edit_date_Of_Birth);        buttonSubmit = findViewById(R.id.button_submit);        circleImageView.setEnabled(false);        circleImageView.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (isOnline()) {                    Intent intentGallary = new Intent();                    intentGallary.setAction(Intent.ACTION_GET_CONTENT);                    CropImage.activity()                            .setGuidelines(CropImageView.Guidelines.ON)                            .setAspectRatio(1, 1)                            .start(ProfileVisitActivity.this);                } else                {                    Toast.makeText(ProfileVisitActivity.this, "Check Your Internet Connection", Toast.LENGTH_SHORT).show();                }            }        });        editTextEditProfile.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                enabeldFeatures();            }        });    }    private void enabeldFeatures() {        editTextName.setEnabled(true);        editTextDOB.setEnabled(true);        editTextAddmisionNo.setEnabled(true);        editTextGender.setEnabled(true);        editTextRollnumber.setEnabled(true);        circleImageView.setEnabled(true);        buttonSubmit.setVisibility(View.VISIBLE);        Toast.makeText(this, "You can now change Image, name, etc.", Toast.LENGTH_LONG).show();                buttonSubmit.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (isOnline()) {                    String dob = editTextDOB.getText().toString();                    String gender = editTextGender.getText().toString();                    String name = editTextName.getText().toString();                    String addmissionNo = editTextAddmisionNo.getText().toString();                    String rollno = editTextRollnumber.getText().toString();                    HashMap hashMap = new HashMap();                    hashMap.put("rollNumber", rollno);                    hashMap.put("dateOfBirth", dob);                    hashMap.put("gender", gender);                    hashMap.put("name", name);                    hashMap.put("admissionNumber", addmissionNo);                    databaseReferenceUserRef.child(CURRENT_USER).updateChildren(hashMap).addOnCompleteListener(new OnCompleteListener() {                        @Override                        public void onComplete(@NonNull Task task) {                            if (task.isSuccessful()) {                                Toast.makeText(ProfileVisitActivity.this, "Profile Update Successfully", Toast.LENGTH_SHORT).show();                                editTextName.setEnabled(false);                                editTextDOB.setEnabled(false);                                editTextAddmisionNo.setEnabled(false);                                editTextGender.setEnabled(false);                                editTextRollnumber.setEnabled(false);                                buttonSubmit.setVisibility(View.GONE);                                circleImageView.setEnabled(false);                            }                        }                    });                } else {                    Toast.makeText(ProfileVisitActivity.this, "Sorry No Internet Connection detected", Toast.LENGTH_SHORT).show();                }            }        });    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {            CropImage.ActivityResult result = CropImage.getActivityResult(data);            if (resultCode == RESULT_OK) {                progressDialog.setTitle("Uploading");                progressDialog.show();                progressDialog.setCanceledOnTouchOutside(false);                dataUri = result.getUri();                Picasso.get().load(dataUri).placeholder(R.drawable.profile).into(circleImageView);                final StorageReference filepath = firebaseStorageUserProfileRef.child(CURRENT_USER + ".jpg");                filepath.putFile(dataUri).continueWithTask(new Continuation <UploadTask.TaskSnapshot, Task <Uri>>() {                    @Override                    public Task <Uri> then(@NonNull Task <UploadTask.TaskSnapshot> task) throws Exception {                        if (!task.isSuccessful()) {                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {                                throw Objects.requireNonNull(task.getException());                            }                        }                        return filepath.getDownloadUrl();                    }                }).addOnCompleteListener(new OnCompleteListener <Uri>() {                    @Override                    public void onComplete(@NonNull Task <Uri> task) {                        if (task.isSuccessful()) {                            downloadUri = task.getResult();                            databaseReferenceUserRef.child(CURRENT_USER).child("profileImage").setValue(downloadUri.toString()).addOnCompleteListener(new OnCompleteListener() {                                @Override                                public void onComplete(@NonNull Task task) {                                    if (task.isSuccessful()) {                                        Toast.makeText(ProfileVisitActivity.this, "Successfully upload Profile Picture", Toast.LENGTH_SHORT).show();                                    } else {                                        progressDialog.dismiss();                                        Toast.makeText(ProfileVisitActivity.this, R.string.error_occourd + ":upload failed", Toast.LENGTH_SHORT).show();                                    }                                }                            });                        }                    }                });                progressDialog.dismiss();            }        }    }    protected boolean isOnline() {        ConnectivityManager cm = (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);        NetworkInfo networkInfo = cm.getActiveNetworkInfo();        if (networkInfo != null && networkInfo.isConnectedOrConnecting()) {            return true;        } else {            return false;        }    }}